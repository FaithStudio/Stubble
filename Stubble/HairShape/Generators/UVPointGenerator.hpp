#ifndef STUBBLE_UV_POINT_GENERATOR_HPP
#define STUBBLE_UV_POINT_GENERATOR_HPP

#include "Common\CommonTypes.hpp"
#include "HairShape\Generators\RandomGenerator.hpp"
#include "HairShape\Mesh\UVPoint.hpp"
#include "HairShape\Mesh\TriangleConstIterator.hpp"
#include "HairShape\Texture\Texture.hpp"

#include <vector>

namespace Stubble
{

namespace HairShape
{

///-------------------------------------------------------------------------------------------------
/// Class for adaptive sampling of the triangular mesh. 
/// Adaptivness is defined by density texture. Samples are returned as UVPoint struct.
/// Requires external random generator of real numbers which must be specified in class constructor.
///-------------------------------------------------------------------------------------------------
class UVPointGenerator
{
public:
	///----------------------------------------------------------------------------------------------------
	/// Default constructor. 
	/// Constructs generator for specific mesh and density. 
	/// Caller must specify external random generator for real numbers generation ( which should be
	/// reseted ).
	///
	/// \param	aTexture						Density texture.
	/// \param	aTriangleConstIterator			Iterator over triangles of sampled mesh.
	/// \param [in,out]	aRandomGenerator		External random number generator. 
	///----------------------------------------------------------------------------------------------------
	UVPointGenerator( const Texture &aTexture, TriangleConstIterator & aTriangleConstIterator, 
		RandomGenerator & aRandomNumberGenerator );

	///----------------------------------------------------------------------------------------------------
	/// Finaliser. 
	///----------------------------------------------------------------------------------------------------
	inline ~UVPointGenerator();

	///----------------------------------------------------------------------------------------------------
	/// Generation of next sample. 
	/// Sample is in UVPoint format ( triangle Id, barycentric coordinates ).
	///
	/// \return	Generated sample. 
	///----------------------------------------------------------------------------------------------------
	UVPoint next();

	///-------------------------------------------------------------------------------------------------
	/// Resets samples generation. 
	/// Also resets external random number generator.
	///-------------------------------------------------------------------------------------------------
	inline void reset();

	///-------------------------------------------------------------------------------------------------
	/// Gets the total density of hair generated by this point generator.
	/// Density is not normalized to [0,1] interval.
	///
	/// \return	The density. 
	///-------------------------------------------------------------------------------------------------
	inline Real getDensity() const;

private:

	///----------------------------------------------------------------------------------------------------
	/// Calculates barycentric coordinates of sub triangles vertices inside split mesh triangle. 
	/// These coordinates are stored in mVertices array.
	///----------------------------------------------------------------------------------------------------
	void buildVertices();
	
	///----------------------------------------------------------------------------------------------------
	/// Struct for holding sub triangle created by recursive splitting of mesh triangle.
	/// Struct contains original triangle id, cumulative distribution function value for this sub triangle
	/// and sub triangle position inside its parent triangle.
	///----------------------------------------------------------------------------------------------------
	struct SubTriangle
	{
		///----------------------------------------------------------------------------------------------------
		/// Sets all sub triangle properties. 
		/// aTriangleID is used as current recursion depth only during SubTriangles structure construction.
		///
		/// \param	aVertex1ID			Index to barycentric coordinates in mVertices of vertex 1. 
		/// \param	aVertex2ID			Index to barycentric coordinates in mVertices of vertex 2.
		/// \param	aVertex3ID			Index to barycentric coordinates in mVertices of vertex 3.
		/// \param	aCDFValue			The cumulative density function value for this sub triangle. 
		/// \param	aTriangleID			Index of parent triangle or current recursion depth. 
		///----------------------------------------------------------------------------------------------------
		void set( unsigned __int16 aVertex1ID, unsigned __int16 aVertex2ID, 
			unsigned __int16 aVertex3ID, Real aCDFValue, unsigned __int32 aTriangleID )
		{
			mVertex1ID = aVertex1ID;
			mVertex2ID = aVertex2ID;
			mVertex3ID = aVertex3ID;
			mCDFValue = aCDFValue;
			mTriangleID = aTriangleID;
		}

		///----------------------------------------------------------------------------------------------------
		/// Default constructor. 
		///----------------------------------------------------------------------------------------------------
		SubTriangle()
		{
		}

		unsigned __int32 mTriangleID; ///< Index of parent triangle or current recursion depth 

		unsigned __int16 mVertex1ID; ///< Index to barycentric coordinates in mVertices of vertex 1. 

		unsigned __int16 mVertex2ID; ///< Index to barycentric coordinates in mVertices of vertex 2. 

		unsigned __int16 mVertex3ID; ///< Index to barycentric coordinates in mVertices of vertex 3. 

		Real mCDFValue; ///< The cdf value
	};

	///----------------------------------------------------------------------------------------------------
	/// Struct for holding barycentric coordinates of sub triangle's vertex inside split split mesh 
	/// triangle.
	///----------------------------------------------------------------------------------------------------
	struct Vertex
	{
		Real mU; ///< The u coordinate
		Real mV; ///< The v coordinate
	};

	///----------------------------------------------------------------------------------------------------
	/// Defines an alias representing array of sub triangles' vertices .
	///----------------------------------------------------------------------------------------------------
	typedef std::vector< Vertex > VerticesArray;

	/// The maximum division depth of one triangle
	static const unsigned __int32 MAX_DIVISION_DEPTH = 8; 

	/// The maximum  side of rectangular part of the density texture that contains all texels mapped on triangle
	/// Triangle is divided until one sub triangle corresponds to one texel.
	/// If maximum is reach, triangle subdivision will stop and texels will remain smaller than sub triangles.
	static const unsigned __int32 MAX_TRIANGLE_UV_SIZE = 1 << MAX_DIVISION_DEPTH;  
	
	/// Number of sub triangles inside one triangle = 4^MAX_DIVISION_DEPTH
	static const unsigned __int32 NUM_TRIANGLES = 1 << ( MAX_DIVISION_DEPTH << 1 );
	
	/// Size of the stack = number of subtriangles + MAX_DIVISION_DEPTH = 4^MAX_DIVISION_DEPTH + MAX_DIVISION_DEPTH
	static const unsigned __int32 STACK_SIZE = NUM_TRIANGLES + MAX_DIVISION_DEPTH;

	///< Index of first vertex in triangle
	static const unsigned __int32 FIRST_VERTEX_INDEX = 0;
	
	///< Index of second vertex in triangle (2^MAX_DIVISION_DEPTH)
	static const unsigned __int32 SECOND_VERTEX_INDEX = 1 << MAX_DIVISION_DEPTH;
	
	///< Index of third vertex in triangle (2^MAX_DIVISION_DEPTH + 2)*(2^MAX_DIVISION_DEPTH + 1)/2 - 1
	static const unsigned __int32 THIRD_VERTEX_INDEX = 
		( ( ( SECOND_VERTEX_INDEX + 1 ) * ( SECOND_VERTEX_INDEX + 2 ) ) >> 1 ) - 1;
	
	///< Number of vertices in divided triangle
	static const unsigned __int32 VERTICES_COUNT = THIRD_VERTEX_INDEX + 1;

	SubTriangle * mBegin;   ///< The pointer to begin of sub triangles array

	SubTriangle * mEnd; ///< The pointer to end of sub triangles array

	Real mTotalDensity; ///< The total density = the highest value of cumulative distribution function
	
	VerticesArray mVertices; ///< The sub triangles' vertices inside one triangle
	
	RandomGenerator & mRandomNumberGenerator; ///< The reference to external random number generator
};

// inline functions implementation

inline UVPointGenerator::~UVPointGenerator()
{
	delete [] mBegin;
}
	
inline void UVPointGenerator::reset()
{
	mRandomNumberGenerator.reset();
}

inline Real UVPointGenerator::getDensity() const
{
	return mTotalDensity;
}

} // namespace HairShape

} // namespace Stubble

#endif // STUBBLE_UV_POINT_GENERATOR_HPP
